{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","id","alt","name","email","CardList","robots","cardComponent","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","value","Scroll","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","state","fetch","then","response","json","users","filteredRobots","this","filter","toLowerCase","includes","href","rel","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gMAeeA,G,MAdH,SAACC,GAET,OAEI,yBAAKC,UAAU,uDAEX,yBAAKC,IAAK,wBAAwBF,EAAMG,GAAG,WAAYC,IAAI,SAC3D,6BACI,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,WCGXC,EAXC,SAAC,GAAY,IAAXC,EAAU,EAAVA,OACRC,EAAcD,EAAOE,KAAI,SAACC,EAAKC,GACjC,OAAO,kBAAC,EAAD,CAAMT,GAAIK,EAAOI,GAAGT,GAAIE,KAAQG,EAAOI,GAAGP,KAAMC,MAAOE,EAAOI,GAAGN,WAG5E,OACI,6BACJG,I,4BCIWI,EAZC,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,YAAYC,EAAiB,EAAjBA,aAE1B,OACJ,yBAAKd,UAAU,OACP,2BAAOe,KAAM,SACZC,YAAY,gBACXhB,UAAU,mCACViB,SAAUH,EACVI,MAAOL,MCCFM,EARD,SAACpB,GAEX,OACJ,yBAAKqB,MAAO,CAACC,UAAU,SAASC,OAAO,kBAAkBC,OAAO,UAC3DxB,EAAMyB,WC8CIC,G,wDA3CX,aAAc,IAAD,8BACT,gBAeJC,eAAe,SAACC,GAEZ,EAAKC,SAAS,CAACf,YAAYc,EAAME,OAAOX,SAhBxC,EAAKY,MAAM,CACPvB,OAAO,GACPM,YAAY,IAJP,E,gEAOO,IAAD,OACfkB,MAAM,8CACLC,MAAK,SAAAC,GACH,OAAOA,EAASC,UAGlBF,MAAK,SAAAG,GACN,EAAKP,SAAS,CAACrB,OAAO4B,S,+BAYrB,IAAD,OACEC,EAAeC,KAAKP,MAAMvB,OAAO+B,QAAO,SAAA/B,GAC1C,OAAOA,EAAOH,KAAKmC,cAAcC,SAAS,EAAKV,MAAMjB,YAAY0B,kBAGrE,OACI,yBAAKvC,UAAU,MACf,0BAAMyC,KAAK,0EAA0EC,IAAI,eACzF,wBAAI1C,UAAU,UAAd,eACA,kBAAC,EAAD,CAAWc,aAAcuB,KAAKX,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUnB,OAAQ6B,U,GAtCRO,c,MCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1c0f6fb8.chunk.js","sourcesContent":["import React ,{Component} from 'react'\r\nconst Card =(props)=>{\r\n\r\n    return(\r\n        \r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\r\n            <img src={\"https://robohash.org/\"+props.id+\"?200x200\"} alt='opaa'/>\r\n            <div>\r\n                <h2>{props.name}</h2>\r\n                <p>{props.email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Card","import React from 'react'\r\nimport Card from './Card'\r\nconst CardList =({robots})=>{\r\n    const cardComponent=robots.map((user,i)=>{\r\n        return <Card id={robots[i].id} name = {robots[i].name} email={robots[i].email}/>\r\n    })\r\n\r\n    return(\r\n        <div>\r\n   {cardComponent}\r\n   </div>\r\n    )\r\n}\r\nexport default CardList","import React from 'react'\r\nconst SearchBox=({searchfield,searchChange} )=>{\r\n\r\n    return(\r\n<div className=\"pa2\">\r\n        <input type =\"search\"\r\n         placeholder=\"search robots\"\r\n          className=\"pa3 ba b--green bg-lightest-blue\" \r\n          onChange={searchChange} \r\n          value={searchfield}></input>\r\n        </div>\r\n    )\r\n}\r\nexport default SearchBox","import React from 'react'\r\n\r\nconst Scroll =(props)=>{\r\n\r\n    return(\r\n<div style={{overflowY:'scroll',border:'1px solid black',height:\"800px\"}}>\r\n    {props.children}\r\n</div>\r\n    )\r\n};\r\nexport default Scroll;","import React, { Component } from 'react'\r\nimport CardList from './CardList'\r\nimport { robots } from './robots'\r\nimport SearchBox from './SearchBox'\r\nimport Scroll from './Scroll'\r\nimport './App.css'\r\n\r\n\r\nclass App extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            robots:[],\r\n            searchfield:''\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=>{\r\n           return response.json();\r\n\r\n        })\r\n        .then(users => {\r\n        this.setState({robots:users});\r\n    });}\r\n    onSearchChange=(event)=>{\r\n      \r\n        this.setState({searchfield:event.target.value})\r\n       \r\n        \r\n        \r\n    }\r\n\r\n    \r\n\r\nrender(){\r\n    const filteredRobots=this.state.robots.filter(robots=>{\r\n        return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n         \r\n    })\r\n    return(\r\n        <div className=\"tc\">\r\n        <link href=\"https://fonts.googleapis.com/css2?family=Orbitron:wght@600&display=swap\" rel=\"stylesheet\"></link>\r\n        <h1 className=\"Header\">ROBOFRIENDS</h1>\r\n        <SearchBox searchChange={this.onSearchChange}/>\r\n        <Scroll>\r\n        <CardList robots={filteredRobots}/>\r\n        </Scroll>\r\n        </div>\r\n    )\r\n}\r\n}\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Card from './Card'\nimport CardList from'./CardList'\nimport App from './App.js'\nimport 'tachyons'\nimport {robots} from './robots'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}